// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "genereted/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  email           String           @unique
  name            String?
  password        String
  workInterval    Int?             @default(50)@map("work_interval")
  breakInterval   Int?             @default(10)@map("break_interval")
  intervalsCount  Int?             @default(7)@map("intervals_count")
  cards           Card[]
  timeBlocks      TimeBlock[]
  pomodoroSesions PomodoroSesion[]

  @@map("user")
}

enum Priority {
  low
  medium
  high
}

model Card {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  name        String
  priority    Priority?
  isCompleted Boolean?  @default(false) @map("is_completed")
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")

  @@map("card")
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comment")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  color     String?
  duration  Int
  order     Int      @default(1)
  user      User     @relation(fields: [userId], references: [id])

  userId String @map("user_id")

  @@map("time_block")
}

model PomodoroSesion {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  user           User            @relation(fields: [userId], references: [id])
  isCompleted    Boolean?        @default(false) @map("is_completed")
  userId         String          @map("user_id")
  pomodoroRounds PomodoroRound[]

  @@map("pomodoro_sesion")
}

model PomodoroRound {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  totalSeconds     Int            @map("total_seconds")
  isCompleted      Boolean?       @default(false) @map("is_complited")
  pomodoroSesionId String         @map("pomodpro_sesion_id")
  pomodoroSesion   PomodoroSesion @relation(fields: [pomodoroSesionId], references: [id], onDelete: Cascade)

  @@map("pomodoro_round")
}
